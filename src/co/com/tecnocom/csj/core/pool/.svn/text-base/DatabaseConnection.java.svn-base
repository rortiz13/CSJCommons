package co.com.tecnocom.csj.core.pool;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.HashMap;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

public enum DatabaseConnection {
	INSTANCE;

	private HashMap<String, DataSource> datasourcesMap;
	private Context initContext;

	private DatabaseConnection() {
		datasourcesMap = new HashMap<String, DataSource>();
		try {
			// Context
			initContext = new InitialContext();
			// dataSource = (DataSource)
			// initContext.lookup("java:comp/env/jdbc/csjDB");
		} catch (NamingException e) {
			e.printStackTrace();
		}
	}

	/**
	 * obtiene el datasource desde un hashmap o hace un lookup si este no se ha
	 * cargado previamente
	 * 
	 * @param datasourceJNDIName
	 * @return java.sql.Connection
	 */
	public Connection getConnection(String datasourceJNDIName) {
		try {

			if (null != datasourcesMap.get(datasourceJNDIName)) {
				return datasourcesMap.get(datasourceJNDIName).getConnection();
			}
			DataSource datasource = (DataSource) initContext.lookup("java:comp/env/jdbc/" + datasourceJNDIName);
			datasourcesMap.put(datasourceJNDIName, datasource);
			return datasource.getConnection();
		} catch (SQLException e) {
			// System.out.println("nombre del datasource: java:comp/env/jdbc/" +
			// datasourceJNDIName);
			e.printStackTrace();
		} catch (NamingException e) {
			// System.out.println("nombre del datasource: java:comp/env/jdbc/" +
			// datasourceJNDIName);
			e.printStackTrace();
		}
		return null;
	}

	public Statement getStatement(Connection connection) {
		try {
			return connection.createStatement();
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
	}

	public PreparedStatement getPreparedStatement(Connection connection, String sql, boolean autoGeneratedKeys) {
		try {
			if (autoGeneratedKeys) {
				return connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			} else {
				return connection.prepareStatement(sql);
			}
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
	}

	public <T> void setPreparedStatementParameter(PreparedStatement ps, T parameter, int parameterIndex) {
		try {
			if (parameter instanceof Long) {
				ps.setLong(parameterIndex, (Long) parameter);
			} else if (parameter instanceof Integer) {
				ps.setInt(parameterIndex, (Integer) parameter);
			} else if (parameter instanceof String) {
				String parameterString = parameter == null ? null : ((String) parameter).trim();
				ps.setString(parameterIndex, parameterString);
			} else if (parameter instanceof Timestamp) {
				ps.setTimestamp(parameterIndex, (Timestamp) parameter);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public ResultSet executeQuery(Statement statement, String sql) {
		try {
			return statement.executeQuery(sql);
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
	}

	public ResultSet executeQuery(PreparedStatement preparedStatement) {
		try {
			return preparedStatement.executeQuery();
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
	}

	public int executeUpdate(PreparedStatement ps) {
		try {
			return ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return 0;
	}

	public Long getGeneratedKeys(PreparedStatement ps, ResultSet rs) {
		try {
			rs = ps.getGeneratedKeys();

			if (rs.next()) {
				return rs.getLong(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return null;
	}

	public void close(Connection connection) {
		if (connection != null) {
			try {
				connection.close();
			} catch (SQLException e) {
			}
		}
	}

	public void close(Statement statement) {
		if (statement != null) {
			try {
				statement.close();
			} catch (SQLException e) {
			}
		}
	}

	public void close(PreparedStatement preparedStatement) {
		if (preparedStatement != null) {
			try {
				preparedStatement.close();
			} catch (SQLException e) {
			}
		}
	}

	public void close(ResultSet resultSet) {
		if (resultSet != null) {
			try {
				resultSet.close();
			} catch (SQLException e) {
			}
		}
	}

	public void close(Connection connection, Statement statement, ResultSet resultSet) {
		if (resultSet != null) {
			try {
				resultSet.close();
			} catch (SQLException e) {
			}
		}

		if (statement != null) {
			try {
				statement.close();
			} catch (SQLException e) {
			}
		}

		if (connection != null) {
			try {
				connection.close();
			} catch (SQLException e) {
			}
		}
	}

	public void close(Connection connection, PreparedStatement preparedStatement, ResultSet resultSet) {
		if (resultSet != null) {
			try {
				resultSet.close();
			} catch (SQLException e) {
			}
		}

		if (preparedStatement != null) {
			try {
				preparedStatement.close();
			} catch (SQLException e) {
			}
		}

		if (connection != null) {
			try {
				connection.close();
			} catch (SQLException e) {
			}
		}
	}

}
